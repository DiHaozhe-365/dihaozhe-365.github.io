<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>文章Demo</title>
    <url>/posts/demo0000.html</url>
    <content><![CDATA[<h2 id="This-is-a-demo-of-post"><a href="#This-is-a-demo-of-post" class="headerlink" title="This is a demo of post."></a>This is a demo of post.</h2>]]></content>
      <categories>
        <category>博客站务</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>第1章 Java 语言概述</title>
    <url>/posts/java0001.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。</p>
<p>由 James Gosling 和同事们共同研发，并在 1995 年正式推出。</p>
<p>后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。</p>
<p>Java分为三个体系：</p>
<ul>
<li>JavaSE（J2SE）（Java2 Platform Standard Edition，Java 平台标准版）</li>
<li>JavaEE（J2EE）（Java 2 Platform，Enterprise Edition，Java 平台企业版）</li>
<li>JavaME（J2ME）（Java 2 Platform Micro Edition，Java 平台微型版）</li>
</ul>
<p>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 JavaSE 6。</p>
<p>此时，Java 的各种版本已经更名，取消数字 “2”：</p>
<ul>
<li>J2EE 更名为 JavaEE</li>
<li>J2SE 更名为 JavaSE</li>
<li>J2ME 更名为 JavaME</li>
</ul>
<h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul>
<li><p>Java 语言是<strong>简单的</strong>：</p>
<p>Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。</p>
<p>另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。</p>
<p>特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。</p>
</li>
<li><p>Java 语言是<strong>面向对象的</strong>：</p>
<p>Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。</p>
<p>Java 语言全面支持动态绑定，而 C++ 语言只对虚函数使用动态绑定。</p>
<p>总之，Java 语言是一个纯的面向对象程序设计语言。</p>
</li>
<li><p>Java语言是<strong>分布式的</strong>：</p>
<p>Java 语言支持 Internet 应用的开发，在基本的 Java 应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括 URL、URLConnection、Socket、ServerSocket 等。</p>
<p>Java 的 RMI（远程方法激活）机制也是开发分布式应用的重要手段。</p>
</li>
<li><p>Java 语言是<strong>健壮的</strong>：</p>
<p>Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证。对指针的丢弃是 Java 的明智选择。</p>
<p>Java 的安全检查机制使得 Java 更具健壮性。</p>
</li>
<li><p>Java 语言是<strong>安全的</strong>：</p>
<p>Java 通常被用在网络环境中，为此，Java 提供了一个安全机制以防恶意代码的攻击。除了 Java 语言具有的许多安全特性以外，Java 对通过网络下载的类具有一个安全防范机制（类 ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类 SecurityManager）让 Java 应用设置安全哨兵。</p>
</li>
<li><p>Java 语言是<strong>体系结构中立的</strong>：</p>
<p>Java 程序（后缀为 .java 的文件）在 Java 平台上被编译为体系结构中立的字节码格式（后缀为 .class 的文件），然后可以在实现这个 Java 平台的任何系统中运行。</p>
<p>这种途径适合于异构的网络环境和软件的分发。</p>
</li>
<li><p>Java 语言是<strong>可移植的</strong>：</p>
<p>这种可移植性来源于体系结构中立性，另外，Java 还严格规定了各个基本数据类型的长度。</p>
<p>Java 系统本身也具有很强的可移植性，Java 编译器是用 Java 实现的，Java 的运行环境是用 ANSI C 实现的。</p>
</li>
<li><p>Java 语言是<strong>解释型的</strong>：</p>
<p>如前所述，Java 程序在 Java 平台上被编译为字节码格式，然后可以在实现这个 Java 平台的任何系统中运行。</p>
<p>在运行时，Java 平台中的 Java 解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。</p>
</li>
<li><p>Java 是<strong>高性能的</strong>：</p>
<p>与那些解释型的高级脚本语言相比，Java 的确是高性能的。事实上，Java 的运行速度随着 JIT（Just-In-Time）编译器技术的发展越来越接近于 C++。</p>
</li>
<li><p>Java 语言是<strong>多线程的</strong>：</p>
<p>在 Java 语言中，线程是一种特殊的对象，它必须由 Thread 类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为 Thread（Runnable）的构造子类将一个实现了 Runnable 接口的对象包装成一个线程，其二，从 Thread 类派生出子类并重写 run 方法，使用该子类创建的对象即为线程。值得注意的是 Thread 类已经实现了 Runnable 接口，因此，任何一个线程均有它的 run 方法，而 run 方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java 语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为 synchronized）。</p>
</li>
<li><p>Java 语言是<strong>动态的</strong>：</p>
<p>Java 语言的设计目标之一是适应于动态变化的环境。Java 程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java 中的类有一个运行时刻的表示，能进行运行时刻的类型检查。</p>
</li>
</ul>
<h2 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h2><ul>
<li>1995 年 5 月 23 日，Java 语言诞生</li>
<li>1996 年 1 月，第一个 JDK-JDK1.0 诞生</li>
<li>1996 年 4 月，10 个最主要的操作系统供应商申明将在其产品中嵌入 JAVA 技术</li>
<li>1996 年 9 月，约 8.3 万个网页应用了 JAVA 技术来制作</li>
<li>1997 年 2 月 18 日，JDK1.1 发布</li>
<li>1997 年 4 月 2 日，JavaOne 会议召开，参与者逾一万人，创当时全球同类会议规模之纪录</li>
<li>1997 年 9 月，JavaDeveloperConnection 社区成员超过十万</li>
<li>1998 年 2 月，JDK1.1 被下载超过 2,000,000 次</li>
<li>1998 年 12 月 8 日，JAVA2 企业平台 J2EE 发布</li>
<li>1999 年 6 月，SUN 公司发布 Java 的三个版本：JavaSE、JavaEE 和 JavaME</li>
<li>2000 年 5 月 8 日，JDK1.3 发布</li>
<li>2000 年 5 月 29 日，JDK1.4 发布</li>
<li>2001 年 6 月 5 日，NOKIA 宣布，到 2003 年将出售 1 亿部支持 Java 的手机</li>
<li>2001 年 9 月 24 日，J2EE1.3 发布</li>
<li>2002 年 2 月 26 日，J2SE1.4 发布，自此 Java 的计算能力有了大幅提升</li>
<li>2004 年 9 月 30 日，J2SE1.5 发布，成为 Java 语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5 更名为 JavaSE 5.0</li>
<li>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 JavaSE 6。此时，Java 的各种版本已经更名，取消数字 “2”</li>
<li>2006 年 12 月，SUN 公司发布 JRE6.0</li>
<li><strong>2009 年 4 月 20 日，甲骨文 74 亿美元收购 Sun，取得 Java 的版权</strong></li>
<li>2010 年 11 月，由于甲骨文对于 Java 社区的不友善，因此 Apache 扬言将退出 JCP</li>
<li>2011 年 7 月 28 日，甲骨文发布 Java7.0 的正式版</li>
<li>2014 年 3 月 18 日，Oracle 公司发表 JavaSE 8</li>
<li>2017 年 9 月 21 日，Oracle 公司发表 JavaSE 9</li>
<li>2018 年 3 月 21 日，Oracle 公司发表 JavaSE 10</li>
<li>2018 年 9 月 25 日，JavaSE 11 发布</li>
<li>2019 年 3 月 20 日，JavaSE 12 发布</li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>以下是 Java 代码实现控制台输出“Hello World”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础知识</title>
    <url>/posts/java0000.html</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="Java-入门：基本语法篇"><a href="#Java-入门：基本语法篇" class="headerlink" title="Java 入门：基本语法篇"></a>Java 入门：基本语法篇</h3><ul>
<li><a href="https://georgedi.top/posts/java0001.html">第1章 Java 语言概述</a></li>
<li><a href="https://georgedi.top/posts/java0002.html">第2章 变量与运算符</a></li>
<li><a href="https://georgedi.top/posts/java0003.html">第3章 流程控制语句</a></li>
<li><a href="https://georgedi.top/posts/java0004.html">第4章 数组</a></li>
</ul>
<h3 id="Java-进阶：面向对象篇"><a href="#Java-进阶：面向对象篇" class="headerlink" title="Java 进阶：面向对象篇"></a>Java 进阶：面向对象篇</h3><ul>
<li><a href="https://georgedi.top/posts/java0005.html">第5章 面向对象编程基础</a></li>
<li><a href="https://georgedi.top/posts/java0006.html">第6章 面向对象编程进阶</a></li>
<li><a href="https://georgedi.top/posts/java0007.html">第7章 面向对象编程高级</a></li>
</ul>
<h3 id="Java-高级：高级应用篇"><a href="#Java-高级：高级应用篇" class="headerlink" title="Java 高级：高级应用篇"></a>Java 高级：高级应用篇</h3><ul>
<li><a href="https://georgedi.top/posts/java0008.html">第8章 异常处理</a></li>
<li><a href="https://georgedi.top/posts/java0009.html">第9章 多线程</a></li>
<li><a href="https://georgedi.top/posts/java0010.html">第10章 常用类</a></li>
<li><a href="https://georgedi.top/posts/java0011.html">第11章 基础 API</a></li>
<li><a href="https://georgedi.top/posts/java0012.html">第12章 集合框架</a></li>
<li><a href="https://georgedi.top/posts/java0013.html">第13章 泛型</a></li>
<li><a href="https://georgedi.top/posts/java0014.html">第14章 数据结构与集合源码</a></li>
<li><a href="https://georgedi.top/posts/java0015.html">第15章 File 类与 IO 流</a></li>
<li><a href="https://georgedi.top/posts/java0016.html">第16章 网络编程</a></li>
<li><a href="https://georgedi.top/posts/java0017.html">第17章 反射机制</a></li>
</ul>
<h3 id="Java-番外篇"><a href="#Java-番外篇" class="headerlink" title="Java 番外篇"></a>Java 番外篇</h3><ul>
<li><a href="https://georgedi.top/posts/java0018.html">Java番外一：JDK 的安装与环境配置</a></li>
<li><a href="https://georgedi.top/posts/java0019.html">Java番外二：JDK 8-17 新特性</a></li>
</ul>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
