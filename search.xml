<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>文章Demo</title>
    <url>/posts/demo0000.html</url>
    <content><![CDATA[<h2 id="This-is-a-demo-of-post"><a href="#This-is-a-demo-of-post" class="headerlink" title="This is a demo of post."></a>This is a demo of post.</h2>]]></content>
      <categories>
        <category>博客站务</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础</title>
    <url>/posts/c0010000.html</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="Java-入门：基本语法篇"><a href="#Java-入门：基本语法篇" class="headerlink" title="Java 入门：基本语法篇"></a>Java 入门：基本语法篇</h3><ul>
<li><a href="https://georgedi.top/posts/c0010001.html">第1章 Java 语言概述</a></li>
<li><a href="https://georgedi.top/posts/c0010002.html">第2章 变量与运算符</a></li>
<li><a href="https://georgedi.top/posts/c0010003.html">第3章 流程控制语句</a></li>
<li><a href="https://georgedi.top/posts/c0010004.html">第4章 数组</a></li>
</ul>
<h3 id="Java-进阶：面向对象篇"><a href="#Java-进阶：面向对象篇" class="headerlink" title="Java 进阶：面向对象篇"></a>Java 进阶：面向对象篇</h3><ul>
<li><a href="https://georgedi.top/posts/c0010005.html">第5章 面向对象编程基础</a></li>
<li><a href="https://georgedi.top/posts/c0010006.html">第6章 面向对象编程进阶</a></li>
<li><a href="https://georgedi.top/posts/c0010007.html">第7章 面向对象编程高级</a></li>
</ul>
<h3 id="Java-高级：高级应用篇"><a href="#Java-高级：高级应用篇" class="headerlink" title="Java 高级：高级应用篇"></a>Java 高级：高级应用篇</h3><ul>
<li><a href="https://georgedi.top/posts/c0010008.html">第8章 异常处理</a></li>
<li><a href="https://georgedi.top/posts/c0010009.html">第9章 多线程</a></li>
<li><a href="https://georgedi.top/posts/c0010010.html">第10章 常用类</a></li>
<li><a href="https://georgedi.top/posts/c0010011.html">第11章 基础 API</a></li>
<li><a href="https://georgedi.top/posts/c0010012.html">第12章 集合框架</a></li>
<li><a href="https://georgedi.top/posts/c0010013.html">第13章 泛型</a></li>
<li><a href="https://georgedi.top/posts/c0010014.html">第14章 数据结构与集合源码</a></li>
<li><a href="https://georgedi.top/posts/c0010015.html">第15章 File 类与 IO 流</a></li>
<li><a href="https://georgedi.top/posts/c0010016.html">第16章 网络编程</a></li>
<li><a href="https://georgedi.top/posts/c0010017.html">第17章 反射机制</a></li>
</ul>
<h3 id="Java-番外篇"><a href="#Java-番外篇" class="headerlink" title="Java 番外篇"></a>Java 番外篇</h3><ul>
<li><a href="https://georgedi.top/posts/c0010018.html">Java番外一：JDK 的安装与环境配置</a></li>
<li><a href="https://georgedi.top/posts/c0010019.html">Java番外二：JDK 8-17 新特性</a></li>
</ul>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>第1章 Java 语言概述</title>
    <url>/posts/c0010001.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。</p>
<p>由 James Gosling 和同事们共同研发，并在 1995 年正式推出。</p>
<p>后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。</p>
<p>Java分为三个体系：</p>
<ul>
<li>JavaSE（J2SE）（Java2 Platform Standard Edition，Java 平台标准版）</li>
<li>JavaEE（J2EE）（Java 2 Platform，Enterprise Edition，Java 平台企业版）</li>
<li>JavaME（J2ME）（Java 2 Platform Micro Edition，Java 平台微型版）</li>
</ul>
<p>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 JavaSE 6。</p>
<p>此时，Java 的各种版本已经更名，取消数字 “2”：</p>
<ul>
<li>J2EE 更名为 JavaEE</li>
<li>J2SE 更名为 JavaSE</li>
<li>J2ME 更名为 JavaME</li>
</ul>
<h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul>
<li><p>Java 语言是<strong>简单的</strong>：</p>
<p>Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。</p>
<p>另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。</p>
<p>特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。</p>
</li>
<li><p>Java 语言是<strong>面向对象的</strong>：</p>
<p>Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。</p>
<p>Java 语言全面支持动态绑定，而 C++ 语言只对虚函数使用动态绑定。</p>
<p>总之，Java 语言是一个纯的面向对象程序设计语言。</p>
</li>
<li><p>Java语言是<strong>分布式的</strong>：</p>
<p>Java 语言支持 Internet 应用的开发，在基本的 Java 应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括 URL、URLConnection、Socket、ServerSocket 等。</p>
<p>Java 的 RMI（远程方法激活）机制也是开发分布式应用的重要手段。</p>
</li>
<li><p>Java 语言是<strong>健壮的</strong>：</p>
<p>Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证。对指针的丢弃是 Java 的明智选择。</p>
<p>Java 的安全检查机制使得 Java 更具健壮性。</p>
</li>
<li><p>Java 语言是<strong>安全的</strong>：</p>
<p>Java 通常被用在网络环境中，为此，Java 提供了一个安全机制以防恶意代码的攻击。除了 Java 语言具有的许多安全特性以外，Java 对通过网络下载的类具有一个安全防范机制（类 ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类 SecurityManager）让 Java 应用设置安全哨兵。</p>
</li>
<li><p>Java 语言是<strong>体系结构中立的</strong>：</p>
<p>Java 程序（后缀为 .java 的文件）在 Java 平台上被编译为体系结构中立的字节码格式（后缀为 .class 的文件），然后可以在实现这个 Java 平台的任何系统中运行。</p>
<p>这种途径适合于异构的网络环境和软件的分发。</p>
</li>
<li><p>Java 语言是<strong>可移植的</strong>：</p>
<p>这种可移植性来源于体系结构中立性，另外，Java 还严格规定了各个基本数据类型的长度。</p>
<p>Java 系统本身也具有很强的可移植性，Java 编译器是用 Java 实现的，Java 的运行环境是用 ANSI C 实现的。</p>
</li>
<li><p>Java 语言是<strong>解释型的</strong>：</p>
<p>如前所述，Java 程序在 Java 平台上被编译为字节码格式，然后可以在实现这个 Java 平台的任何系统中运行。</p>
<p>在运行时，Java 平台中的 Java 解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。</p>
</li>
<li><p>Java 是<strong>高性能的</strong>：</p>
<p>与那些解释型的高级脚本语言相比，Java 的确是高性能的。事实上，Java 的运行速度随着 JIT（Just-In-Time）编译器技术的发展越来越接近于 C++。</p>
</li>
<li><p>Java 语言是<strong>多线程的</strong>：</p>
<p>在 Java 语言中，线程是一种特殊的对象，它必须由 Thread 类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为 Thread（Runnable）的构造子类将一个实现了 Runnable 接口的对象包装成一个线程，其二，从 Thread 类派生出子类并重写 run 方法，使用该子类创建的对象即为线程。值得注意的是 Thread 类已经实现了 Runnable 接口，因此，任何一个线程均有它的 run 方法，而 run 方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java 语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为 synchronized）。</p>
</li>
<li><p>Java 语言是<strong>动态的</strong>：</p>
<p>Java 语言的设计目标之一是适应于动态变化的环境。Java 程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java 中的类有一个运行时刻的表示，能进行运行时刻的类型检查。</p>
</li>
</ul>
<h2 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h2><ul>
<li>1995 年 5 月 23 日，Java 语言诞生</li>
<li>1996 年 1 月，第一个 JDK-JDK1.0 诞生</li>
<li>1996 年 4 月，10 个最主要的操作系统供应商申明将在其产品中嵌入 Java 技术</li>
<li>1996 年 9 月，约 8.3 万个网页应用了 Java 技术来制作</li>
<li>1997 年 2 月 18 日，JDK1.1 发布</li>
<li>1997 年 4 月 2 日，JavaOne 会议召开，参与者逾一万人，创当时全球同类会议规模之纪录</li>
<li>1997 年 9 月，JavaDeveloperConnection 社区成员超过十万</li>
<li>1998 年 2 月，JDK1.1 被下载超过 2,000,000 次</li>
<li>1998 年 12 月 8 日，Java2 企业平台 J2EE 发布</li>
<li>1999 年 6 月，SUN 公司发布 Java 的三个版本：JavaSE、JavaEE 和 JavaME</li>
<li>2000 年 5 月 8 日，JDK1.3 发布</li>
<li>2000 年 5 月 29 日，JDK1.4 发布</li>
<li>2001 年 6 月 5 日，NOKIA 宣布，到 2003 年将出售 1 亿部支持 Java 的手机</li>
<li>2001 年 9 月 24 日，J2EE1.3 发布</li>
<li>2002 年 2 月 26 日，J2SE1.4 发布，自此 Java 的计算能力有了大幅提升</li>
<li>2004 年 9 月 30 日，J2SE1.5 发布，成为 Java 语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5 更名为 JavaSE 5.0</li>
<li>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 JavaSE 6。此时，Java 的各种版本已经更名，取消数字 “2”</li>
<li>2006 年 12 月，SUN 公司发布 JRE6.0</li>
<li><strong>2009 年 4 月 20 日，甲骨文 74 亿美元收购 Sun，取得 Java 的版权</strong></li>
<li>2010 年 11 月，由于甲骨文对于 Java 社区的不友善，因此 Apache 扬言将退出 JCP</li>
<li>2011 年 7 月 28 日，甲骨文发布 Java7.0 的正式版</li>
<li>2014 年 3 月 18 日，Oracle 公司发表 JavaSE 8</li>
<li>2017 年 9 月 21 日，Oracle 公司发表 JavaSE 9</li>
<li>2018 年 3 月 21 日，Oracle 公司发表 JavaSE 10</li>
<li>2018 年 9 月 25 日，JavaSE 11 发布</li>
<li>2019 年 3 月 20 日，JavaSE 12 发布</li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>以下是 Java 代码实现控制台输出“Hello World”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>编写 Java 程序时，应注意以下几点：</p>
<ul>
<li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li>
<li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li>
<li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li>
<li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li>
<li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>第2章 变量与运算符</title>
    <url>/posts/c0010002.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。</p>
<p>由 James Gosling 和同事们共同研发，并在 1995 年正式推出。</p>
<p>后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。</p>
<p>Java分为三个体系：</p>
<ul>
<li>JavaSE（J2SE）（Java2 Platform Standard Edition，Java 平台标准版）</li>
<li>JavaEE（J2EE）（Java 2 Platform，Enterprise Edition，Java 平台企业版）</li>
<li>JavaME（J2ME）（Java 2 Platform Micro Edition，Java 平台微型版）</li>
</ul>
<p>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 JavaSE 6。</p>
<p>此时，Java 的各种版本已经更名，取消数字 “2”：</p>
<ul>
<li>J2EE 更名为 JavaEE</li>
<li>J2SE 更名为 JavaSE</li>
<li>J2ME 更名为 JavaME</li>
</ul>
<h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul>
<li><p>Java 语言是<strong>简单的</strong>：</p>
<p>Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。</p>
<p>另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。</p>
<p>特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。</p>
</li>
<li><p>Java 语言是<strong>面向对象的</strong>：</p>
<p>Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。</p>
<p>Java 语言全面支持动态绑定，而 C++ 语言只对虚函数使用动态绑定。</p>
<p>总之，Java 语言是一个纯的面向对象程序设计语言。</p>
</li>
<li><p>Java语言是<strong>分布式的</strong>：</p>
<p>Java 语言支持 Internet 应用的开发，在基本的 Java 应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括 URL、URLConnection、Socket、ServerSocket 等。</p>
<p>Java 的 RMI（远程方法激活）机制也是开发分布式应用的重要手段。</p>
</li>
<li><p>Java 语言是<strong>健壮的</strong>：</p>
<p>Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证。对指针的丢弃是 Java 的明智选择。</p>
<p>Java 的安全检查机制使得 Java 更具健壮性。</p>
</li>
<li><p>Java 语言是<strong>安全的</strong>：</p>
<p>Java 通常被用在网络环境中，为此，Java 提供了一个安全机制以防恶意代码的攻击。除了 Java 语言具有的许多安全特性以外，Java 对通过网络下载的类具有一个安全防范机制（类 ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类 SecurityManager）让 Java 应用设置安全哨兵。</p>
</li>
<li><p>Java 语言是<strong>体系结构中立的</strong>：</p>
<p>Java 程序（后缀为 .java 的文件）在 Java 平台上被编译为体系结构中立的字节码格式（后缀为 .class 的文件），然后可以在实现这个 Java 平台的任何系统中运行。</p>
<p>这种途径适合于异构的网络环境和软件的分发。</p>
</li>
<li><p>Java 语言是<strong>可移植的</strong>：</p>
<p>这种可移植性来源于体系结构中立性，另外，Java 还严格规定了各个基本数据类型的长度。</p>
<p>Java 系统本身也具有很强的可移植性，Java 编译器是用 Java 实现的，Java 的运行环境是用 ANSI C 实现的。</p>
</li>
<li><p>Java 语言是<strong>解释型的</strong>：</p>
<p>如前所述，Java 程序在 Java 平台上被编译为字节码格式，然后可以在实现这个 Java 平台的任何系统中运行。</p>
<p>在运行时，Java 平台中的 Java 解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。</p>
</li>
<li><p>Java 是<strong>高性能的</strong>：</p>
<p>与那些解释型的高级脚本语言相比，Java 的确是高性能的。事实上，Java 的运行速度随着 JIT（Just-In-Time）编译器技术的发展越来越接近于 C++。</p>
</li>
<li><p>Java 语言是<strong>多线程的</strong>：</p>
<p>在 Java 语言中，线程是一种特殊的对象，它必须由 Thread 类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为 Thread（Runnable）的构造子类将一个实现了 Runnable 接口的对象包装成一个线程，其二，从 Thread 类派生出子类并重写 run 方法，使用该子类创建的对象即为线程。值得注意的是 Thread 类已经实现了 Runnable 接口，因此，任何一个线程均有它的 run 方法，而 run 方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java 语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为 synchronized）。</p>
</li>
<li><p>Java 语言是<strong>动态的</strong>：</p>
<p>Java 语言的设计目标之一是适应于动态变化的环境。Java 程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java 中的类有一个运行时刻的表示，能进行运行时刻的类型检查。</p>
</li>
</ul>
<h2 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h2><ul>
<li>1995 年 5 月 23 日，Java 语言诞生</li>
<li>1996 年 1 月，第一个 JDK-JDK1.0 诞生</li>
<li>1996 年 4 月，10 个最主要的操作系统供应商申明将在其产品中嵌入 JAVA 技术</li>
<li>1996 年 9 月，约 8.3 万个网页应用了 JAVA 技术来制作</li>
<li>1997 年 2 月 18 日，JDK1.1 发布</li>
<li>1997 年 4 月 2 日，JavaOne 会议召开，参与者逾一万人，创当时全球同类会议规模之纪录</li>
<li>1997 年 9 月，JavaDeveloperConnection 社区成员超过十万</li>
<li>1998 年 2 月，JDK1.1 被下载超过 2,000,000 次</li>
<li>1998 年 12 月 8 日，JAVA2 企业平台 J2EE 发布</li>
<li>1999 年 6 月，SUN 公司发布 Java 的三个版本：JavaSE、JavaEE 和 JavaME</li>
<li>2000 年 5 月 8 日，JDK1.3 发布</li>
<li>2000 年 5 月 29 日，JDK1.4 发布</li>
<li>2001 年 6 月 5 日，NOKIA 宣布，到 2003 年将出售 1 亿部支持 Java 的手机</li>
<li>2001 年 9 月 24 日，J2EE1.3 发布</li>
<li>2002 年 2 月 26 日，J2SE1.4 发布，自此 Java 的计算能力有了大幅提升</li>
<li>2004 年 9 月 30 日，J2SE1.5 发布，成为 Java 语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5 更名为 JavaSE 5.0</li>
<li>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 JavaSE 6。此时，Java 的各种版本已经更名，取消数字 “2”</li>
<li>2006 年 12 月，SUN 公司发布 JRE6.0</li>
<li><strong>2009 年 4 月 20 日，甲骨文 74 亿美元收购 Sun，取得 Java 的版权</strong></li>
<li>2010 年 11 月，由于甲骨文对于 Java 社区的不友善，因此 Apache 扬言将退出 JCP</li>
<li>2011 年 7 月 28 日，甲骨文发布 Java7.0 的正式版</li>
<li>2014 年 3 月 18 日，Oracle 公司发表 JavaSE 8</li>
<li>2017 年 9 月 21 日，Oracle 公司发表 JavaSE 9</li>
<li>2018 年 3 月 21 日，Oracle 公司发表 JavaSE 10</li>
<li>2018 年 9 月 25 日，JavaSE 11 发布</li>
<li>2019 年 3 月 20 日，JavaSE 12 发布</li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>以下是 Java 代码实现控制台输出“Hello World”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>《软件工程经济学》</title>
    <url>/posts/a0090000.html</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="https://georgedi.top/posts/a0090001.html">第1章 绪论</a></li>
<li><a href="https://georgedi.top/posts/a0090002.html">第2章 软件工程经济学基础</a></li>
<li><a href="https://georgedi.top/posts/a0090003.html">第3章 软件的成本管理与定价分析</a></li>
<li><a href="https://georgedi.top/posts/a0090004.html">第4章 软件工程项目评价方法与经济效果评价</a></li>
<li><a href="https://georgedi.top/posts/a0090005.html">第5章 软件生产函数、效益分析及不确定性分析</a></li>
<li><a href="https://georgedi.top/posts/a0090006.html">第6章 软件工程项目进度计划的制订</a></li>
</ul>
]]></content>
      <categories>
        <category>科班基础</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
        <tag>经济学</tag>
      </tags>
  </entry>
  <entry>
    <title>第3章 软件的成本管理与定价分析</title>
    <url>/posts/a0090003.html</url>
    <content><![CDATA[<h2 id="3-1-软件的成本构成及其影响因素"><a href="#3-1-软件的成本构成及其影响因素" class="headerlink" title="3.1 软件的成本构成及其影响因素"></a>3.1 软件的成本构成及其影响因素</h2><p>软件成本是指软件工程项目从设计到软件产品或软件工程项目完成期间所需费用的总和。</p>
<p>成本的分类方法一般可以按照不同的准则进行划分：</p>
<ol>
<li><strong>按照企业的主要经营活动</strong>可分为采购成本、研究与开发成本、生产成本、经营成本以及管理费用。</li>
<li><strong>按照生产费用计入成本</strong>的方法，可分为直接成本和间接成本。</li>
<li><strong>按照成本与所完成项目工作量的关系</strong>，可分为固定成本和变动成本。</li>
<li><strong>按照成本所确定的时间</strong>，可分为预算成本、计划成本及实际成本。</li>
</ol>
<h3 id="3-1-1-软件工程项目的成本构成"><a href="#3-1-1-软件工程项目的成本构成" class="headerlink" title="3.1.1 软件工程项目的成本构成"></a>3.1.1 软件工程项目的成本构成</h3><p>软件成本是软件在其生存周期内为取得各种软、硬件资源的支持以及维持系统的研究、生产经营及管理工作所支付的所有费用。</p>
<p>软件工程项目成本又称为软件工程项目支出，是指为了实现软件工程项目目标所耗用资源的成本总和。软件工程项目成本主要由<strong>硬件成本</strong>、<strong>软件开发成本</strong>、<strong>人员培训费用</strong>和<strong>项目管理费用</strong>等构成。</p>
<p>软件工程项目成本主要涉及以下 15 类：</p>
<ol>
<li>调研费用</li>
<li>环境建设费用</li>
<li>工具购置费</li>
<li>基建费用</li>
<li>软件开发&#x2F;测试费用</li>
<li>人力资源费用</li>
<li>水、电、运输费</li>
<li>第三方评测费</li>
<li>软件产品制作费用</li>
<li>培训费用</li>
<li>现场实施费用</li>
<li>营销费用</li>
<li>售后服务运行维护费</li>
<li>管理费用</li>
<li>其他费用</li>
</ol>
<h2 id="3-2-软件的成本核算"><a href="#3-2-软件的成本核算" class="headerlink" title="3.2 软件的成本核算"></a>3.2 软件的成本核算</h2><p>对软件工程项目的成本与工期测算的方法较多，通常有功能分解法、统计模型法、价值工程法、表格法、驱动因子法、计算机模拟法、类比法、专门成本测算工具软件预算等方法。</p>
<p>以下主要分析<strong>驱动因子法</strong>和<strong>类比法</strong>。</p>
<h3 id="3-2-1-功能分解法"><a href="#3-2-1-功能分解法" class="headerlink" title="3.2.1 功能分解法"></a>3.2.1 功能分解法</h3><p>功能分解法主要从结构上将软件系统按照功能或者性能与生存周期各阶段进行二维分解。</p>
<h3 id="3-2-2-驱动因子法"><a href="#3-2-2-驱动因子法" class="headerlink" title="3.2.2 驱动因子法"></a>3.2.2 驱动因子法</h3><p>驱动因子法又称为影响因子法，是一种在统计模型的基础上通过引入更多对 y 有影响的要素，来完成统计模型估计值的修正的一种定性与定量相结合的方法。</p>
<ol>
<li><p><strong>驱动因子法的求解方法</strong></p>
<ol>
<li><p>确定对因变量 y 做出估计的统计模型 y&#x3D;g(x<sub>1</sub>,x<sub>2</sub>,…,x<sub>n</sub>)，其中x<sub>j</sub>（1~n）是指通过定量估算法求得的对 y 有较大影响的几个要素。</p>
</li>
<li><p>引入综合要素 U，U 是指除了 x<sub>j</sub> 以外对 y 有影响的估计值，如下列公式所示。<br>$$<br>y &#x3D; U · g(x_{1},x_{2},…,x_{n})<br>$$</p>
<p>$$<br>U &#x3D; \prod_{j&#x3D;1}^{n} U_{j}<br>$$</p>
</li>
</ol>
</li>
<li><p><strong>影响要素引入 x<sub>j</sub> （1~n）的基本原则</strong></p>
<ol>
<li>对 y 有重要影响的要素归入 x<sub>j</sub>，其他归入 U<sub>j</sub>。</li>
<li>易于定量的影响要素归入 x<sub>j</sub>，不易于定量的影响要素归入 U<sub>j</sub>。</li>
<li>x<sub>j</sub> 的数量不宜太多，否则求解统计模型较困难。</li>
</ol>
</li>
<li><p><strong>结构化成本模型</strong></p>
<p>结构化成本模型（COCOMO）主要有基本模型、中级模型和详细模型三种。</p>
<p>中级模型适用于系统规划阶段作软件成本估算的模型，其求解方式如下列公式所示。<br>$$<br>C_{s} &#x3D; a · M_{s}<br>$$</p>
<p>$$<br>T_{d} &#x3D; h(M_{s})^d<br>$$</p>
<p>$$<br>M_{s} &#x3D; U · M_{0}<br>$$</p>
<p>$$<br>M_{0} &#x3D; r · L^{k}<br>$$</p>
<p>$$<br>U &#x3D; \prod_{j&#x3D;1}^{15} U_{j}<br>$$</p>
</li>
</ol>
<p><strong>中级 COCOMO 变量参数明细表如下。</strong></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">变量名称</th>
<th align="center">经济含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">C<sub>s</sub></td>
<td align="center">软件开发成本</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">a</td>
<td align="center">软件开发阶段的工时费用率</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">M<sub>s</sub></td>
<td align="center">软件开发阶段的修正工作量</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">M<sub>0</sub></td>
<td align="center">软件开发阶段的基本工作量</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">L</td>
<td align="center">软件开发规模</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">U</td>
<td align="center">软件综合影响要素</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">U<sub>j</sub></td>
<td align="center">对成本有一定影响的第 j 个影响要素</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">T<sub>d</sub></td>
<td align="center">工期（开发周期）</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">r，k，h，d</td>
<td align="center">形式参数</td>
</tr>
</tbody></table>
<p><strong>中级 COCOMO 形式参数明细表如下。</strong></p>
<table>
    <thead>
        <tr align="center">
            <th rowspan="2">软件总体类型</th>
            <th colspan="2">基本工作量 M<sub>0</sub></th>
            <th colspan="2">开发工期 T<sub>d</sub></th>  
        </tr>
        <tr align="center">
            <td>r</td>
            <td>k</td>
            <td>h</td>
            <td>d</td>
        </tr>
    </thead>
    <tbody>
        <tr align="center">
            <td>有机型</td>
            <td>3.2</td>
            <td>1.05</td>
            <td>2.5</td>
            <td>0.38</td>
        </tr>
        <tr align="center">
            <td>嵌入型</td>
            <td>2.8</td>
            <td>1.20</td>
            <td>2.5</td>
            <td>0.32</td>
        </tr>
        <tr align="center">
            <td>半独立型</td>
            <td>3.0</td>
            <td>1.12</td>
            <td>2.5</td>
            <td>0.35</td>
        </tr>
    </tbody>
</table>


<p><strong>中级 COCOMO 工作量影响因素等级明细表如下。</strong></p>
<table>
    <thead>
        <tr align="center">
            <th colspan="2">工作量影响要素 U</th>
            <th>非常低</th>
            <th>低</th>
            <th>正常</th>
            <th>高</th>
            <th>非常高</th>
            <th>超高</th>
        </tr>
    </thead>
    <tbody>
        <tr align="center">
            <td rowspan="3">产品因素类</td>
            <td>软件可靠性 U<sub>1</sub></td>
            <td>0.75</td>
            <td>0.88</td>
            <td>1.00</td>
            <td>1.15</td>
            <td>1.40</td>
            <td>-</td>
        </tr>
        <tr align="center">
            <td>数据库规模 U<sub>2</sub></td>
            <td>-</td>
            <td>0.94</td>
            <td>1.00</td>
            <td>1.08</td>
            <td>1.16</td>
            <td>-</td>
        </tr>
        <tr align="center">
            <td>产品复杂性 U<sub>3</sub></td>
            <td>0.70</td>
            <td>0.85</td>
            <td>1.00</td>
            <td>1.15</td>
            <td>1.30</td>
            <td>1.65</td>
        </tr>
        <tr align="center">
            <td rowspan="4">计算机因素类</td>
            <td>执行时间限制 U<sub>4</sub></td>
            <td>-</td>
            <td>-</td>
            <td>1.00</td>
            <td>1.10</td>
            <td>1.30</td>
            <td>1.65</td>
        </tr>
        <tr align="center">
            <td>主存储限制 U<sub>5</sub></td>
            <td>-</td>
            <td>-</td>
            <td>1.00</td>
            <td>1.06</td>
            <td>1.21</td>
            <td>1.65</td>
        </tr>
        <tr align="center">
            <td>易变性 U<sub>6</sub></td>
            <td>-</td>
            <td>0.87</td>
            <td>1.00</td>
            <td>1.15</td>
            <td>1.30</td>
            <td>-</td>
        </tr>
        <tr align="center">
            <td>环境周转时间 U<sub>7</sub></td>
            <td>-</td>
            <td>0.87</td>
            <td>1.00</td>
            <td>1.07</td>
            <td>1.15</td>
            <td>-</td>
        </tr>
        <tr align="center">
            <td rowspan="5">人员因素类</td>
            <td>分析员能力 U<sub>8</sub></td>
            <td>1.46</td>
            <td>1.19</td>
            <td>1.00</td>
            <td>0.86</td>
            <td>0.71</td>
            <td>-</td>
        </tr>
        <tr align="center">
            <td>应用领域实际经验 U<sub>9</sub></td>
            <td>1.29</td>
            <td>1.13</td>
            <td>1.00</td>
            <td>0.91</td>
            <td>0.82</td>
            <td>-</td>
        </tr>
        <tr align="center">
            <td>程序员能力 U<sub>10</sub></td>
            <td>1.42</td>
            <td>1.17</td>
            <td>1.00</td>
            <td>0.86</td>
            <td>0.70</td>
            <td>-</td>
        </tr>
        <tr align="center">
            <td>使用经验 U<sub>11</sub></td>
            <td>1.21</td>
            <td>1.10</td>
            <td>1.00</td>
            <td>0.90</td>
            <td>-</td>
            <td>-</td>
        </tr>
        <tr align="center">
            <td>程序语言使用经验 U<sub>12</sub></td>
            <td>1.41</td>
            <td>1.07</td>
            <td>1.00</td>
            <td>0.95</td>
            <td>-</td>
            <td>-</td>
        </tr>
        <tr align="center">
            <td rowspan="3">项目因素类</td>
            <td>现代程序设计技术 U<sub>13</sub></td>
            <td>1.24</td>
            <td>1.10</td>
            <td>1.00</td>
            <td>0.91</td>
            <td>0.82</td>
            <td>-</td>
        </tr>
        <tr align="center">
            <td>软件工具的使用 U<sub>14</sub></td>
            <td>1.24</td>
            <td>1.10</td>
            <td>1.00</td>
            <td>0.91</td>
            <td>0.83</td>
            <td>-</td>
        </tr>
        <tr align="center">
            <td>开发进度限制 U<sub>15</sub></td>
            <td>1.23</td>
            <td>1.08</td>
            <td>1.00</td>
            <td>1.04</td>
            <td>1.10</td>
            <td>-</td>
        </tr>
    </tbody>
</table>
### 3.2.3 类比法

<p>软件企业开发软件通常有两种情况：①全新开发方式；②目标软件与以往开发的某款或者某些软件有许多相同或类似的结构，涉及的开发人员变化也较少，则可采用类比法来估算目标软件的成本。</p>
<p>假设某软件企业以往开发过一个类似的软件 S<sub>X</sub>，其软件规模为 L<sub>X</sub>；目标开发软件为 S<sub>Y</sub>,其软件规模为 L<sub>Y</sub>。由于目标开发软件的功能结构与原软件 S<sub>X</sub> 有很多类似之处，因此决定在 S<sub>X</sub> 的基础上改编成 S<sub>Y</sub>。</p>
<p>故引入调整系数 AC，主要通过设计修改 DMC、代码修改 CMC，以及集成修改 IMC 三部分构成。</p>
<p>调整系数 AC 可用下列公式表示：<br>$$<br>AC &#x3D; W_{1} · DMC + W_{2} · CMC + W_{3} · IMC<br>$$</p>
<p>式中 W<sub>j</sub>（j&#x3D;1，2，3）表示权重系数，其加权和必须等于 1。</p>
<p>B.W.Boehm 建议权重系数 W<sub>1</sub>，W<sub>2</sub>，W<sub>3</sub> 分别取值为 0.4、0.3 和 0.3。也就是下列公式。<br>$$<br>AC &#x3D; 0.4 · DMC + 0.3 · CMC + 0.3 · IMC<br>$$<br>由此可得 S<sub>Y</sub> 软件的开发规模 L<sub>Y</sub> 可以用下列公式表示。<br>$$<br>L_{Y} &#x3D; L_{X} · AC &#x3D; L_{X} · (0.4 · DMC + 0.3 · CMC + 0.3 · IMC)<br>$$</p>
<h3 id="3-2-4-设备的磨损与折旧"><a href="#3-2-4-设备的磨损与折旧" class="headerlink" title="3.2.4 设备的磨损与折旧"></a>3.2.4 设备的磨损与折旧</h3><ol>
<li><p><strong>设备的磨损</strong></p>
<ol>
<li><p>设备的<strong>有形磨损</strong></p>
<p>有形磨损是指设备在生产使用或者闲置过程中，由于使用或者受自然环境的影响所产生的损耗。</p>
<p>设备的有形磨损根据导致其磨损的不同原因可分为：</p>
<ul>
<li>第 Ⅰ 类有形磨损</li>
<li>第 Ⅱ 类有形磨损</li>
</ul>
</li>
<li></li>
</ol>
</li>
<li><p><strong>设备的折旧</strong></p>
</li>
</ol>
<h2 id="3-3-价值工程"><a href="#3-3-价值工程" class="headerlink" title="3.3 价值工程"></a>3.3 价值工程</h2><h3 id="3-3-1-价值工程的基本原理"><a href="#3-3-1-价值工程的基本原理" class="headerlink" title="3.3.1 价值工程的基本原理"></a>3.3.1 价值工程的基本原理</h3><h3 id="3-3-2-价值工程的实施步骤与方法"><a href="#3-3-2-价值工程的实施步骤与方法" class="headerlink" title="3.3.2 价值工程的实施步骤与方法"></a>3.3.2 价值工程的实施步骤与方法</h3><h3 id="3-3-3-功能分析与评价"><a href="#3-3-3-功能分析与评价" class="headerlink" title="3.3.3 功能分析与评价"></a>3.3.3 功能分析与评价</h3><h3 id="3-3-4-挣值管理"><a href="#3-3-4-挣值管理" class="headerlink" title="3.3.4 挣值管理"></a>3.3.4 挣值管理</h3><h2 id="3-4-软件产品的定价与营销"><a href="#3-4-软件产品的定价与营销" class="headerlink" title="3.4 软件产品的定价与营销"></a>3.4 软件产品的定价与营销</h2><h3 id="3-4-1-软件产品的定价"><a href="#3-4-1-软件产品的定价" class="headerlink" title="3.4.1 软件产品的定价"></a>3.4.1 软件产品的定价</h3><h3 id="3-4-2-软件产品的营销"><a href="#3-4-2-软件产品的营销" class="headerlink" title="3.4.2 软件产品的营销"></a>3.4.2 软件产品的营销</h3>]]></content>
      <tags>
        <tag>软件工程</tag>
        <tag>经济学</tag>
      </tags>
  </entry>
</search>
